var searchIndex = {};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[8,"RngCore","rand","The core of a random number generator.",null,null],[10,"next_u32","","Return the next random `u32`.",0,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"next_u64","","Return the next random `u64`.",0,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[10,"fill_bytes","","Fill `dest` with random data.",0,null],[10,"try_fill_bytes","","Fill `dest` entirely with random data.",0,null],[8,"CryptoRng","","A marker trait used to indicate that an [`RngCore`] or [`BlockRngCore`] implementation is supposed to be cryptographically secure.",null,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded.",null,null],[16,"Seed","","Seed type, which is restricted to types mutably-dereferencable as `u8` arrays (we recommend `[u8; N]` for some `N`).",1,null],[10,"from_seed","","Create a new PRNG using the given seed.",1,null],[11,"from_rng","","Create a new PRNG seeded from another `Rng`.",1,{"i":[{"n":"r"}],"o":{"g":["error"],"n":"result"}}],[4,"ErrorKind","","Error kind which can be matched over.",null,null],[13,"Unavailable","","Feature is not available; not recoverable.",2,null],[13,"Unexpected","","General failure; there may be a chance of recovery on retry.",2,null],[13,"Transient","","A transient failure which likely can be resolved or worked around.",2,null],[13,"NotReady","","Not ready yet: recommended to try again a little later.",2,null],[3,"Error","","Error type of random number generators",null,null],[12,"kind","","The error kind",3,null],[12,"msg","","The error message",3,null],[3,"Generator","","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number generator, seeded by the system. Intended to be used in method chaining style, e.g. `thread_rng().gen::<i32>()`, or cached locally, e.g. `let mut rng = thread_rng();`.",null,{"o":{"n":"threadrng"}}],[5,"weak_rng","","DEPRECATED: use [`SmallRng`] instead.",null,{"o":{"n":"xorshiftrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"o":{"n":"t"}}],[5,"sample","","DEPRECATED: use `seq::sample_iter` instead.",null,{"i":[{"n":"r"},{"n":"i"},{"n":"usize"}],"o":{"n":"vec"}}],[0,"distributions","","Generating random samples from probability distributions.",null,null],[3,"Alphanumeric","rand::distributions","Sample a `char`, uniformly distributed over ASCII letters and numbers: a-z, A-Z and 0-9.",null,null],[3,"Uniform","","Sample values uniformly between two bounds.",null,null],[3,"OpenClosed01","","A distribution to sample floating point numbers uniformly in the half-open interval `(0, 1]`, i.e. including 1 but not 0.",null,null],[3,"Open01","","A distribution to sample floating point numbers uniformly in the open interval `(0, 1)`, i.e. not including either endpoint.",null,null],[3,"Gamma","","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",null,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[3,"StandardNormal","","Samples floating-point numbers according to the normal distribution `N(0, 1)` (a.k.a.  a standard normal, or Gaussian). This is equivalent to `Normal::new(0.0, 1.0)` but faster.",null,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[3,"Exp1","","Samples floating-point numbers according to the exponential distribution, with rate parameter `λ = 1`. This is equivalent to `Exp::new(1.0)` or sampling with `-rng.gen::<f64>().ln()`, but faster.",null,null],[3,"Poisson","","The Poisson distribution `Poisson(lambda)`.",null,null],[3,"Binomial","","The binomial distribution `Binomial(n, p)`.",null,null],[3,"Bernoulli","","The Bernoulli distribution.",null,null],[3,"DistIter","","An iterator that generates random values of `T` with distribution `D`, using `R` as the source of randomness.",null,null],[3,"Standard","","A generic random value distribution, implemented for many primitive types. Usually generates values with a numerically uniform distribution, and with a range appropriate to the type.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",4,null],[12,"item","","The actual item which is being weighted",4,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"uniform","","A distribution uniformly sampling numbers within a given range.",null,null],[3,"Uniform","rand::distributions::uniform","Sample values uniformly between two bounds.",null,null],[3,"UniformInt","","The back-end implementing [`UniformSampler`] for integer types.",null,null],[3,"UniformFloat","","The back-end implementing [`UniformSampler`] for floating-point types.",null,null],[3,"UniformDuration","","The back-end implementing [`UniformSampler`] for `Duration`.",null,null],[8,"SampleUniform","","Helper trait for creating objects using the correct implementation of [`UniformSampler`] for the sampling type.",null,null],[16,"Sampler","","The `UniformSampler` implementation supporting type `X`.",5,null],[8,"UniformSampler","","Helper trait handling actual uniform sampling.",null,null],[16,"X","","The type sampled by this implementation.",6,null],[10,"new","","Construct self, with inclusive lower bound and exclusive upper bound `[low, high)`.",6,null],[10,"new_inclusive","","Construct self, with inclusive bounds `[low, high]`.",6,null],[10,"sample","","Sample a value.",6,null],[11,"sample_single","","Sample a single value uniformly from a range with inclusive lower bound and exclusive upper bound `[low, high)`.",6,null],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"uniform"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new `Uniform` instance which samples uniformly from the half open range `[low, high)` (excluding `high`). Panics if `low >= high`.",7,{"i":[{"n":"x"},{"n":"x"}],"o":{"n":"uniform"}}],[11,"new_inclusive","","Create a new `Uniform` instance which samples uniformly from the closed range `[low, high]` (inclusive). Panics if `low > high`.",7,{"i":[{"n":"x"},{"n":"x"}],"o":{"n":"uniform"}}],[11,"sample","","",7,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"x"}}],[11,"from","","",7,{"i":[{"n":"range"}],"o":{"n":"uniform"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"uniformint"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",8,null],[11,"new_inclusive","","",8,null],[11,"sample","","",8,null],[11,"sample_single","","",8,null],[11,"new","","",8,null],[11,"new_inclusive","","",8,null],[11,"sample","","",8,null],[11,"sample_single","","",8,null],[11,"new","","",8,null],[11,"new_inclusive","","",8,null],[11,"sample","","",8,null],[11,"sample_single","","",8,null],[11,"new","","",8,null],[11,"new_inclusive","","",8,null],[11,"sample","","",8,null],[11,"sample_single","","",8,null],[11,"new","","",8,null],[11,"new_inclusive","","",8,null],[11,"sample","","",8,null],[11,"sample_single","","",8,null],[11,"new","","",8,null],[11,"new_inclusive","","",8,null],[11,"sample","","",8,null],[11,"sample_single","","",8,null],[11,"new","","",8,null],[11,"new_inclusive","","",8,null],[11,"sample","","",8,null],[11,"sample_single","","",8,null],[11,"new","","",8,null],[11,"new_inclusive","","",8,null],[11,"sample","","",8,null],[11,"sample_single","","",8,null],[11,"new","","",8,null],[11,"new_inclusive","","",8,null],[11,"sample","","",8,null],[11,"sample_single","","",8,null],[11,"new","","",8,null],[11,"new_inclusive","","",8,null],[11,"sample","","",8,null],[11,"sample_single","","",8,null],[11,"new","","",8,null],[11,"new_inclusive","","",8,null],[11,"sample","","",8,null],[11,"sample_single","","",8,null],[11,"new","","",8,null],[11,"new_inclusive","","",8,null],[11,"sample","","",8,null],[11,"sample_single","","",8,null],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"uniformfloat"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",9,null],[11,"new_inclusive","","",9,null],[11,"sample","","",9,null],[11,"sample_single","","",9,null],[11,"new","","",9,null],[11,"new_inclusive","","",9,null],[11,"sample","","",9,null],[11,"sample_single","","",9,null],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"uniformduration"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",10,{"i":[{"n":"duration"},{"n":"duration"}],"o":{"n":"uniformduration"}}],[11,"new_inclusive","","",10,{"i":[{"n":"duration"},{"n":"duration"}],"o":{"n":"uniformduration"}}],[11,"sample","","",10,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"duration"}}],[11,"clone","rand::distributions","",11,{"i":[{"n":"self"}],"o":{"n":"gamma"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)` distribution.",11,{"i":[{"n":"f64"},{"n":"f64"}],"o":{"n":"gamma"}}],[11,"sample","","",11,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"chisquared"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom `k`. Panics if `k < 0`.",12,{"i":[{"n":"f64"}],"o":{"n":"chisquared"}}],[11,"sample","","",12,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"fisherf"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new `FisherF` distribution, with the given parameter. Panics if either `m` or `n` are not positive.",13,{"i":[{"n":"f64"},{"n":"f64"}],"o":{"n":"fisherf"}}],[11,"sample","","",13,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"studentt"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new Student t distribution with `n` degrees of freedom. Panics if `n <= 0`.",14,{"i":[{"n":"f64"}],"o":{"n":"studentt"}}],[11,"sample","","",14,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"standardnormal"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"sample","","",15,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"normal"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and standard deviation.",16,{"i":[{"n":"f64"},{"n":"f64"}],"o":{"n":"normal"}}],[11,"sample","","",16,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"lognormal"}}],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean and standard deviation.",17,{"i":[{"n":"f64"},{"n":"f64"}],"o":{"n":"lognormal"}}],[11,"sample","","",17,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"exp1"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"sample","","",18,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"exp"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Construct a new `Exp` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",19,{"i":[{"n":"f64"}],"o":{"n":"exp"}}],[11,"sample","","",19,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"poisson"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Construct a new `Poisson` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",20,{"i":[{"n":"f64"}],"o":{"n":"poisson"}}],[11,"sample","","",20,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"u64"}}],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"binomial"}}],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Construct a new `Binomial` with the given shape parameters `n` (number of trials) and `p` (probability of success).",21,{"i":[{"n":"u64"},{"n":"f64"}],"o":{"n":"binomial"}}],[11,"sample","","",21,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"u64"}}],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"bernoulli"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Construct a new `Bernoulli` with the given probability of success `p`.",22,{"i":[{"n":"f64"}],"o":{"n":"bernoulli"}}],[11,"sample","","",22,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"bool"}}],[11,"clone","","",23,{"i":[{"n":"self"}],"o":{"n":"openclosed01"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",24,{"i":[{"n":"self"}],"o":{"n":"open01"}}],[11,"fmt","","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"sample","","",25,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f32"}}],[11,"sample","","",23,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f32"}}],[11,"sample","","",24,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f32"}}],[11,"sample","","",25,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"sample","","",23,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"sample","","",24,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"sample","","",25,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"u8"}}],[11,"sample","","",25,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"u16"}}],[11,"sample","","",25,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"u32"}}],[11,"sample","","",25,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"u64"}}],[11,"sample","","",25,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"u128"}}],[11,"sample","","",25,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"usize"}}],[11,"sample","","",25,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"i8"}}],[11,"sample","","",25,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"i16"}}],[11,"sample","","",25,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"i32"}}],[11,"sample","","",25,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"i64"}}],[11,"sample","","",25,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"i128"}}],[11,"sample","","",25,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"isize"}}],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"sample","","",25,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"char"}}],[11,"sample","","",26,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"char"}}],[11,"sample","","",25,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"bool"}}],[11,"sample","","",25,null],[11,"sample","","",25,null],[11,"sample","","",25,null],[11,"sample","","",25,null],[11,"sample","","",25,null],[11,"sample","","",25,null],[11,"sample","","",25,null],[11,"sample","","",25,null],[11,"sample","","",25,null],[11,"sample","","",25,null],[11,"sample","","",25,null],[11,"sample","","",25,null],[11,"sample","","",25,null],[11,"sample","","",25,null],[11,"sample","","",25,null],[11,"sample","","",25,null],[11,"sample","","",25,null],[11,"sample","","",25,null],[11,"sample","","",25,null],[11,"sample","","",25,null],[11,"sample","","",25,null],[11,"sample","","",25,null],[11,"sample","","",25,null],[11,"sample","","",25,null],[11,"sample","","",25,null],[11,"sample","","",25,null],[11,"sample","","",25,null],[11,"sample","","",25,null],[11,"sample","","",25,null],[11,"sample","","",25,null],[11,"sample","","",25,null],[11,"sample","","",25,null],[11,"sample","","",25,null],[11,"sample","","",25,null],[11,"sample","","",25,null],[11,"sample","","",25,null],[11,"sample","","",25,null],[11,"sample","","",25,null],[11,"sample","","",25,null],[11,"sample","","",25,null],[11,"sample","","",25,null],[11,"sample","","",25,null],[11,"sample","","",25,null],[11,"sample","","",25,null],[11,"sample","","",25,null],[11,"sample","","",25,null],[11,"sample","","",25,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"option"}}],[11,"sample","","",25,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"wrapping"}}],[0,"range","","DEPRECATED: Use `distributions::uniform` instead.",null,null],[11,"sample","","",27,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"t"}}],[11,"ind_sample","","",27,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"t"}}],[11,"sample","rand::distributions::uniform","",7,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"t"}}],[11,"ind_sample","","",7,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"t"}}],[11,"sample","rand::distributions","",19,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"ind_sample","","",19,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"sample","","",11,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"ind_sample","","",11,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"sample","","",12,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"ind_sample","","",12,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"sample","","",13,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"ind_sample","","",13,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"sample","","",14,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"ind_sample","","",14,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"sample","","",16,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"ind_sample","","",16,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"sample","","",17,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"ind_sample","","",17,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[8,"Sample","","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the source of randomness.",28,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",29,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"support"}}],[8,"Distribution","","Types (distributions) that can be used to create a random instance of `T`.",null,null],[10,"sample","","Generate a random value of `T`, using `rng` as the source of randomness.",30,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"t"}}],[11,"sample_iter","","Create an iterator that generates random values of `T`, using `rng` as the source of randomness.",30,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"distiter"}}],[11,"fmt","","",31,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",31,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",31,null],[11,"clone","","",25,{"i":[{"n":"self"}],"o":{"n":"standard"}}],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"weighted"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new `WeightedChoice`.",27,null],[11,"sample","","",27,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"t"}}],[0,"prelude","rand","Convenience re-export of common members",null,null],[0,"prng","","Pseudo-random number generators.",null,null],[3,"XorShiftRng","rand::prng","An Xorshift[1] random number generator.",null,null],[0,"chacha","","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::prng::chacha","A cryptographically secure random number generator that uses the ChaCha algorithm.",null,null],[3,"ChaChaCore","","The core of `ChaChaRng`, used with `BlockRng`.",null,null],[11,"clone","","",32,{"i":[{"n":"self"}],"o":{"n":"chacharng"}}],[11,"fmt","","",32,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next_u32","","",32,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u64","","",32,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"fill_bytes","","",32,null],[11,"try_fill_bytes","","",32,null],[11,"from_seed","","",32,null],[11,"from_rng","","",32,{"i":[{"n":"r"}],"o":{"g":["error"],"n":"result"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default fixed key of 8 zero words.",32,{"o":{"n":"chacharng"}}],[11,"get_word_pos","","Get the offset from the start of the stream, in 32-bit words.",32,{"i":[{"n":"self"}],"o":{"n":"u128"}}],[11,"set_word_pos","","Set the offset from the start of the stream, in 32-bit words.",32,{"i":[{"n":"self"},{"n":"u128"}]}],[11,"set_stream","","Set the stream number.",32,{"i":[{"n":"self"},{"n":"u64"}]}],[11,"clone","","",33,{"i":[{"n":"self"}],"o":{"n":"chachacore"}}],[11,"fmt","","",33,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"generate","","",33,null],[11,"from_seed","","",33,null],[11,"from","","",32,{"i":[{"n":"chachacore"}],"o":{"n":"self"}}],[0,"hc128","rand::prng","The HC-128 random number generator.",null,null],[3,"Hc128Rng","rand::prng::hc128","A cryptographically secure random number generator that uses the HC-128 algorithm.",null,null],[3,"Hc128Core","","The core of `Hc128Rng`, used with `BlockRng`.",null,null],[11,"clone","","",34,{"i":[{"n":"self"}],"o":{"n":"hc128rng"}}],[11,"fmt","","",34,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next_u32","","",34,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u64","","",34,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"fill_bytes","","",34,null],[11,"try_fill_bytes","","",34,null],[11,"from_seed","","",34,null],[11,"from_rng","","",34,{"i":[{"n":"r"}],"o":{"g":["error"],"n":"result"}}],[11,"clone","","",35,{"i":[{"n":"self"}],"o":{"n":"hc128core"}}],[11,"fmt","","",35,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"generate","","",35,null],[11,"from_seed","","Create an HC-128 random number generator with a seed. The seed has to be 256 bits in length, matching the 128 bit `key` followed by 128 bit `iv` when HC-128 where to be used as a stream cipher.",35,null],[0,"isaac","rand::prng","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::prng::isaac","A random number generator that uses the ISAAC algorithm.",null,null],[3,"IsaacCore","","The core of `IsaacRng`, used with `BlockRng`.",null,null],[11,"clone","","",36,{"i":[{"n":"self"}],"o":{"n":"isaacrng"}}],[11,"fmt","","",36,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next_u32","","",36,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u64","","",36,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"fill_bytes","","",36,null],[11,"try_fill_bytes","","",36,null],[11,"from_seed","","",36,null],[11,"from_rng","","",36,{"i":[{"n":"s"}],"o":{"g":["error"],"n":"result"}}],[11,"new_unseeded","","Create an ISAAC random number generator using the default fixed seed.",36,{"o":{"n":"self"}}],[11,"new_from_u64","","Create an ISAAC random number generator using an `u64` as seed. If `seed == 0` this will produce the same stream of random numbers as the reference implementation when used unseeded.",36,{"i":[{"n":"u64"}],"o":{"n":"self"}}],[11,"clone","","",37,{"i":[{"n":"self"}],"o":{"n":"isaaccore"}}],[11,"fmt","","",37,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"generate","","Refills the output buffer, `results`. See also the pseudocode desciption of the algorithm in the [`IsaacRng`] documentation.",37,{"i":[{"n":"self"},{"n":"isaacarray"}]}],[11,"from_seed","","",37,null],[11,"from_rng","","",37,{"i":[{"n":"r"}],"o":{"g":["error"],"n":"result"}}],[0,"isaac64","rand::prng","The ISAAC-64 random number generator.",null,null],[3,"Isaac64Rng","rand::prng::isaac64","A random number generator that uses ISAAC-64, the 64-bit variant of the ISAAC algorithm.",null,null],[3,"Isaac64Core","","The core of `Isaac64Rng`, used with `BlockRng`.",null,null],[11,"clone","","",38,{"i":[{"n":"self"}],"o":{"n":"isaac64rng"}}],[11,"fmt","","",38,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next_u32","","",38,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u64","","",38,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"fill_bytes","","",38,null],[11,"try_fill_bytes","","",38,null],[11,"from_seed","","",38,null],[11,"from_rng","","",38,{"i":[{"n":"s"}],"o":{"g":["error"],"n":"result"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the default fixed seed.",38,{"o":{"n":"self"}}],[11,"new_from_u64","","Create an ISAAC-64 random number generator using an `u64` as seed. If `seed == 0` this will produce the same stream of random numbers as the reference implementation when used unseeded.",38,{"i":[{"n":"u64"}],"o":{"n":"self"}}],[11,"clone","","",39,{"i":[{"n":"self"}],"o":{"n":"isaac64core"}}],[11,"fmt","","",39,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"generate","","Refills the output buffer, `results`. See also the pseudocode desciption of the algorithm in the [`Isaac64Rng`] documentation.",39,{"i":[{"n":"self"},{"n":"isaacarray"}]}],[11,"new_from_u64","","Create an ISAAC-64 random number generator using an `u64` as seed. If `seed == 0` this will produce the same stream of random numbers as the reference implementation when used unseeded.",39,{"i":[{"n":"u64"}],"o":{"n":"self"}}],[11,"from_seed","","",39,null],[11,"from_rng","","",39,{"i":[{"n":"r"}],"o":{"g":["error"],"n":"result"}}],[11,"clone","rand::prng","",40,{"i":[{"n":"self"}],"o":{"n":"xorshiftrng"}}],[11,"fmt","","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",40,{"o":{"n":"xorshiftrng"}}],[11,"next_u32","","",40,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u64","","",40,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"fill_bytes","","",40,null],[11,"try_fill_bytes","","",40,null],[11,"from_seed","","",40,null],[11,"from_rng","","",40,{"i":[{"n":"r"}],"o":{"g":["error"],"n":"result"}}],[0,"rngs","rand","Random number generators and adapters for common usage:",null,null],[3,"JitterRng","rand::rngs","A true random number generator based on jitter in the CPU execution time, and jitter in memory access time.",null,null],[3,"EntropyRng","","An interface returning random data from external source(s), provided specifically for securely seeding algorithmic generators (PRNGs).",null,null],[3,"OsRng","","A random number generator that retrieves randomness straight from the operating system.",null,null],[3,"SmallRng","","An RNG recommended when small state, cheap initialization and good performance are required. The PRNG algorithm in `SmallRng` is chosen to be efficient on the current platform, without consideration for cryptography or security. The size of its state is much smaller than for [`StdRng`].",null,null],[3,"StdRng","","The standard RNG. The PRNG algorithm in `StdRng` is chosen to be efficient on the current platform, to be statistically strong and unpredictable (meaning a cryptographically secure PRNG).",null,null],[3,"ThreadRng","","The type returned by [`thread_rng`], essentially just a reference to the PRNG in thread-local memory.",null,null],[4,"TimerError","","An error that can occur when [`JitterRng::test_timer`] fails.",null,null],[13,"NoTimer","","No timer available.",41,null],[13,"CoarseTimer","","Timer too coarse to use as an entropy source.",41,null],[13,"NotMonotonic","","Timer is not monotonically increasing.",41,null],[13,"TinyVariantions","","Variations of deltas of time too small.",41,null],[13,"TooManyStuck","","Too many stuck results (indicating no added entropy).",41,null],[0,"adapter","","Wrappers / adapters forming RNGs",null,null],[3,"ReadRng","rand::rngs::adapter","An RNG that reads random bytes straight from any type supporting `std::io::Read`, for example files.",null,null],[3,"ReseedingRng","","A wrapper around any PRNG which reseeds the underlying PRNG after it has generated a certain number of random bytes.",null,null],[11,"fmt","","",42,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new `ReadRng` from a `Read`.",42,{"i":[{"n":"r"}],"o":{"n":"readrng"}}],[11,"next_u32","","",42,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u64","","",42,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"fill_bytes","","",42,null],[11,"try_fill_bytes","","",42,null],[11,"fmt","","",43,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",43,{"i":[{"n":"r"},{"n":"u64"},{"n":"rsdr"}],"o":{"n":"self"}}],[11,"reseed","","Reseed the internal PRNG.",43,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"result"}}],[11,"next_u32","","",43,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u64","","",43,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"fill_bytes","","",43,null],[11,"try_fill_bytes","","",43,null],[11,"clone","","",43,{"i":[{"n":"self"}],"o":{"n":"reseedingrng"}}],[11,"fmt","rand::rngs","",44,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new `EntropyRng`.",44,{"o":{"n":"self"}}],[11,"default","","",44,{"o":{"n":"self"}}],[11,"next_u32","","",44,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u64","","",44,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"fill_bytes","","",44,null],[11,"try_fill_bytes","","",44,null],[11,"fmt","","",45,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",45,{"i":[{"n":"self"}],"o":{"n":"jitterrng"}}],[11,"fmt","","",41,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",41,{"i":[{"n":"self"}],"o":{"n":"timererror"}}],[11,"eq","","",41,{"i":[{"n":"self"},{"n":"timererror"}],"o":{"n":"bool"}}],[11,"fmt","","",41,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",41,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"from","rand","",3,{"i":[{"n":"timererror"}],"o":{"n":"error"}}],[11,"new","rand::rngs","Create a new `JitterRng`. Makes use of `std::time` for a timer, or a platform-specific function with higher accuracy if necessary and available.",45,{"o":{"g":["jitterrng","timererror"],"n":"result"}}],[11,"new_with_timer","","Create a new `JitterRng`. A custom timer can be supplied, making it possible to use `JitterRng` in `no_std` environments.",45,null],[11,"set_rounds","","Configures how many rounds are used to generate each 64-bit value. This must be greater than zero, and has a big impact on performance and output quality.",45,{"i":[{"n":"self"},{"n":"u8"}]}],[11,"test_timer","","Basic quality tests on the timer, by measuring CPU timing jitter a few hundred times.",45,{"i":[{"n":"self"}],"o":{"g":["u8","timererror"],"n":"result"}}],[11,"timer_stats","","Statistical test: return the timer delta of one normal run of the `JitterRng` entropy collector.",45,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"i64"}}],[11,"next_u32","","",45,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u64","","",45,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"fill_bytes","","",45,null],[11,"try_fill_bytes","","",45,null],[0,"mock","","Mock random number generator",null,null],[3,"StepRng","rand::rngs::mock","A simple implementation of `RngCore` for testing purposes.",null,null],[11,"fmt","","",46,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",46,{"i":[{"n":"self"}],"o":{"n":"steprng"}}],[11,"new","","Create a `StepRng`, yielding an arithmetic sequence starting with `initial` and incremented by `increment` each time.",46,{"i":[{"n":"u64"},{"n":"u64"}],"o":{"n":"self"}}],[11,"next_u32","","",46,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u64","","",46,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"fill_bytes","","",46,null],[11,"try_fill_bytes","","",46,null],[11,"clone","rand::rngs","",47,{"i":[{"n":"self"}],"o":{"n":"osrng"}}],[11,"fmt","","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new `OsRng`.",47,{"o":{"g":["osrng","error"],"n":"result"}}],[11,"next_u32","","",47,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u64","","",47,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"fill_bytes","","",47,null],[11,"try_fill_bytes","","",47,null],[11,"clone","","",48,{"i":[{"n":"self"}],"o":{"n":"smallrng"}}],[11,"fmt","","",48,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next_u32","","",48,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u64","","",48,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"fill_bytes","","",48,null],[11,"try_fill_bytes","","",48,null],[11,"from_seed","","",48,null],[11,"from_rng","","",48,{"i":[{"n":"r"}],"o":{"g":["error"],"n":"result"}}],[11,"clone","","",49,{"i":[{"n":"self"}],"o":{"n":"stdrng"}}],[11,"fmt","","",49,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next_u32","","",49,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u64","","",49,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"fill_bytes","","",49,null],[11,"try_fill_bytes","","",49,null],[11,"from_seed","","",49,null],[11,"from_rng","","",49,{"i":[{"n":"r"}],"o":{"g":["error"],"n":"result"}}],[11,"clone","","",50,{"i":[{"n":"self"}],"o":{"n":"threadrng"}}],[11,"fmt","","",50,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next_u32","","",50,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u64","","",50,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"fill_bytes","","",50,null],[11,"try_fill_bytes","","",50,null],[0,"seq","rand","Functions for randomly accessing and sampling sequences.",null,null],[5,"sample_iter","rand::seq","Randomly sample `amount` elements from a finite iterator.",null,{"i":[{"n":"r"},{"n":"i"},{"n":"usize"}],"o":{"g":["vec","vec"],"n":"result"}}],[5,"sample_slice","","Randomly sample exactly `amount` values from `slice`.",null,null],[5,"sample_slice_ref","","Randomly sample exactly `amount` references from `slice`.",null,null],[5,"sample_indices","","Randomly sample exactly `amount` indices from `0..length`.",null,{"i":[{"n":"r"},{"n":"usize"},{"n":"usize"}],"o":{"g":["usize"],"n":"vec"}}],[8,"Rand","rand","A type that can be randomly generated using an [`Rng`].",null,null],[10,"rand","","Generates a random instance of this type using the specified source of randomness.",51,{"i":[{"n":"r"}],"o":{"n":"self"}}],[8,"Rng","","An automatically-implemented extension trait on [`RngCore`] providing high-level generic methods for sampling values and other convenience methods.",null,null],[11,"gen","","Return a random value supporting the [`Standard`] distribution.",52,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`), i.e. inclusive of `low` and exclusive of `high`.",52,{"i":[{"n":"self"},{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[11,"sample","","Sample a new value, using the given distribution.",52,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"t"}}],[11,"sample_iter","","Create an iterator that generates values using the given distribution.",52,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"distiter"}}],[11,"fill","","Fill `dest` entirely with random bytes (uniform value distribution), where `dest` is any type supporting [`AsByteSliceMut`], namely slices and arrays over primitive integer types (`i8`, `i16`, `u32`, etc.).",52,{"i":[{"n":"self"},{"n":"t"}]}],[11,"try_fill","","Fill `dest` entirely with random bytes (uniform value distribution), where `dest` is any type supporting [`AsByteSliceMut`], namely slices and arrays over primitive integer types (`i8`, `i16`, `u32`, etc.).",52,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["error"],"n":"result"}}],[11,"gen_bool","","Return a bool with a probability `p` of being true.",52,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"bool"}}],[11,"choose","","Return a random element from `values`.",52,null],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",52,null],[11,"shuffle","","Shuffle a mutable slice in place.",52,null],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",52,{"i":[{"n":"self"}],"o":{"n":"generator"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",52,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",52,{"i":[{"n":"self"}],"o":{"n":"asciigenerator"}}],[8,"AsByteSliceMut","","Trait for casting types to byte slices",null,null],[10,"as_byte_slice_mut","","Return a mutable reference to self as a byte slice",53,null],[10,"to_le","","Call `to_le` on each element (i.e. byte-swap on Big Endian platforms).",53,{"i":[{"n":"self"}]}],[8,"FromEntropy","","A convenience extension to [`SeedableRng`] allowing construction from fresh entropy. This trait is automatically implemented for any PRNG implementing [`SeedableRng`] and is not intended to be implemented by users.",null,null],[10,"from_entropy","","Creates a new instance, automatically seeded with fresh entropy.",54,{"o":{"n":"self"}}],[11,"fmt","","",55,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",55,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"fmt","","",56,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",56,{"i":[{"n":"self"}],"o":{"g":["char"],"n":"option"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"errorkind"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"read","","",0,null],[11,"description","","",3,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",3,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"errorkind"}],"o":{"n":"bool"}}],[11,"should_retry","","True if this kind of error may resolve itself on retry.",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"should_wait","","True if we should retry but wait before retrying",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"description","","A description of this error kind",2,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"new","","Create a new instance, with specified kind and a message.",3,{"i":[{"n":"errorkind"},{"n":"str"}],"o":{"n":"error"}}],[11,"with_cause","","Create a new instance, with specified kind, message, and a chained cause.",3,{"i":[{"n":"errorkind"},{"n":"str"},{"n":"e"}],"o":{"n":"error"}}],[11,"take_cause","","Take the cause, if any. This allows the embedded cause to be extracted. This uses `Option::take`, leaving `self` with no cause.",3,{"i":[{"n":"self"}],"o":{"g":["box"],"n":"option"}}]],"paths":[[8,"RngCore"],[8,"SeedableRng"],[4,"ErrorKind"],[3,"Error"],[3,"Weighted"],[8,"SampleUniform"],[8,"UniformSampler"],[3,"Uniform"],[3,"UniformInt"],[3,"UniformFloat"],[3,"UniformDuration"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[3,"Poisson"],[3,"Binomial"],[3,"Bernoulli"],[3,"OpenClosed01"],[3,"Open01"],[3,"Standard"],[3,"Alphanumeric"],[3,"WeightedChoice"],[8,"Sample"],[8,"IndependentSample"],[8,"Distribution"],[3,"DistIter"],[3,"ChaChaRng"],[3,"ChaChaCore"],[3,"Hc128Rng"],[3,"Hc128Core"],[3,"IsaacRng"],[3,"IsaacCore"],[3,"Isaac64Rng"],[3,"Isaac64Core"],[3,"XorShiftRng"],[4,"TimerError"],[3,"ReadRng"],[3,"ReseedingRng"],[3,"EntropyRng"],[3,"JitterRng"],[3,"StepRng"],[3,"OsRng"],[3,"SmallRng"],[3,"StdRng"],[3,"ThreadRng"],[8,"Rand"],[8,"Rng"],[8,"AsByteSliceMut"],[8,"FromEntropy"],[3,"Generator"],[3,"AsciiGenerator"]]};
searchIndex["rand_core"] = {"doc":"Random number generation traits","items":[[3,"Error","rand_core","Error type of random number generators",null,null],[12,"kind","","The error kind",0,null],[12,"msg","","The error message",0,null],[4,"ErrorKind","","Error kind which can be matched over.",null,null],[13,"Unavailable","","Feature is not available; not recoverable.",1,null],[13,"Unexpected","","General failure; there may be a chance of recovery on retry.",1,null],[13,"Transient","","A transient failure which likely can be resolved or worked around.",1,null],[13,"NotReady","","Not ready yet: recommended to try again a little later.",1,null],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"errorkind"}],"o":{"n":"bool"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"errorkind"}}],[11,"should_retry","","True if this kind of error may resolve itself on retry.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"should_wait","","True if we should retry but wait before retrying",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"description","","A description of this error kind",1,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new instance, with specified kind and a message.",0,{"i":[{"n":"errorkind"},{"n":"str"}],"o":{"n":"self"}}],[11,"with_cause","","Create a new instance, with specified kind, message, and a chained cause.",0,{"i":[{"n":"errorkind"},{"n":"str"},{"n":"e"}],"o":{"n":"self"}}],[11,"take_cause","","Take the cause, if any. This allows the embedded cause to be extracted. This uses `Option::take`, leaving `self` with no cause.",0,{"i":[{"n":"self"}],"o":{"g":["box"],"n":"option"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",0,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",0,{"i":[{"n":"self"}],"o":{"g":["stderror"],"n":"option"}}],[0,"block","","The `BlockRngCore` trait and implementation helpers",null,null],[3,"BlockRng","rand_core::block","A wrapper type implementing [`RngCore`] for some type implementing [`BlockRngCore`] with `u32` array buffer; i.e. this can be used to implement a full RNG from just a `generate` function.",null,null],[12,"core","","The core part of the RNG, implementing the `generate` function.",2,null],[3,"BlockRng64","","A wrapper type implementing [`RngCore`] for some type implementing [`BlockRngCore`] with `u64` array buffer; i.e. this can be used to implement a full RNG from just a `generate` function.",null,null],[12,"core","","The core part of the RNG, implementing the `generate` function.",3,null],[8,"BlockRngCore","","A trait for RNGs which do not generate random numbers individually, but in blocks (typically `[u32; N]`). This technique is commonly used by cryptographic RNGs to improve performance.",null,null],[16,"Item","","Results element type, e.g. `u32`.",4,null],[16,"Results","","Results type. This is the 'block' an RNG implementing `BlockRngCore` generates, which will usually be an array like `[u32; 16]`.",4,null],[10,"generate","","Generate a new block of results.",4,null],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"blockrng"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new `BlockRng` from an existing RNG implementing `BlockRngCore`. Results will be generated on first use.",2,{"i":[{"n":"r"}],"o":{"n":"blockrng"}}],[11,"index","","Get the index into the result buffer.",2,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"reset","","Reset the number of available results. This will force a new set of results to be generated on next use.",2,{"i":[{"n":"self"}]}],[11,"generate_and_set","","Generate a new set of results immediately, setting the index to the given value.",2,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"next_u32","","",2,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u64","","",2,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"fill_bytes","","",2,null],[11,"try_fill_bytes","","",2,null],[11,"from_seed","","",2,null],[11,"from_rng","","",2,{"i":[{"n":"s"}],"o":{"g":["error"],"n":"result"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"blockrng64"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new `BlockRng` from an existing RNG implementing `BlockRngCore`. Results will be generated on first use.",3,{"i":[{"n":"r"}],"o":{"n":"blockrng64"}}],[11,"index","","Get the index into the result buffer.",3,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"reset","","Reset the number of available results. This will force a new set of results to be generated on next use.",3,{"i":[{"n":"self"}]}],[11,"generate_and_set","","Generate a new set of results immediately, setting the index to the given value.",3,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"next_u32","","",3,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u64","","",3,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"fill_bytes","","",3,null],[11,"try_fill_bytes","","",3,null],[11,"from_seed","","",3,null],[11,"from_rng","","",3,{"i":[{"n":"s"}],"o":{"g":["error"],"n":"result"}}],[0,"impls","rand_core","Helper functions for implementing `RngCore` functions.",null,null],[5,"next_u64_via_u32","rand_core::impls","Implement `next_u64` via `next_u32`, little-endian order.",null,{"i":[{"n":"r"}],"o":{"n":"u64"}}],[5,"fill_bytes_via_next","","Implement `fill_bytes` via `next_u64` and `next_u32`, little-endian order.",null,null],[5,"fill_via_u32_chunks","","Implement `fill_bytes` by reading chunks from the output buffer of a block based RNG.",null,null],[5,"fill_via_u64_chunks","","Implement `fill_bytes` by reading chunks from the output buffer of a block based RNG.",null,null],[5,"next_u32_via_fill","","Implement `next_u32` via `fill_bytes`, little-endian order.",null,{"i":[{"n":"r"}],"o":{"n":"u32"}}],[5,"next_u64_via_fill","","Implement `next_u64` via `fill_bytes`, little-endian order.",null,{"i":[{"n":"r"}],"o":{"n":"u64"}}],[0,"le","rand_core","Little-Endian utilities",null,null],[5,"read_u32_into","rand_core::le","Reads unsigned 32 bit integers from `src` into `dst`. Borrowed from the `byteorder` crate.",null,null],[5,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`. Borrowed from the `byteorder` crate.",null,null],[8,"RngCore","rand_core","The core of a random number generator.",null,null],[10,"next_u32","","Return the next random `u32`.",5,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"next_u64","","Return the next random `u64`.",5,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[10,"fill_bytes","","Fill `dest` with random data.",5,null],[10,"try_fill_bytes","","Fill `dest` entirely with random data.",5,null],[8,"CryptoRng","","A marker trait used to indicate that an [`RngCore`] or [`BlockRngCore`] implementation is supposed to be cryptographically secure.",null,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded.",null,null],[16,"Seed","","Seed type, which is restricted to types mutably-dereferencable as `u8` arrays (we recommend `[u8; N]` for some `N`).",6,null],[10,"from_seed","","Create a new PRNG using the given seed.",6,null],[11,"from_rng","","Create a new PRNG seeded from another `Rng`.",6,{"i":[{"n":"r"}],"o":{"g":["error"],"n":"result"}}],[11,"read","","",5,null]],"paths":[[3,"Error"],[4,"ErrorKind"],[3,"BlockRng"],[3,"BlockRng64"],[8,"BlockRngCore"],[8,"RngCore"],[8,"SeedableRng"]]};
initSearch(searchIndex);
